---
integrations:
  - name: nri-flex
    # interval: 30s
    config:
      name: PowerBI
      # Right now we're going to hardcode the username/pass right into the config but we can experiment with
      # using this later.
      # secrets:
      #   mylogin:
      #     kind: local # Use Flex local/internal decryption function
      #     key: N3wR3lic! # Your pass_phrase to encrypt/decrypt the Salesforce login info
      #     data: <==YOUR ENCRYPTED LOGIN INFO from the command below==>
      #     # Run the following command to generate a encrypted login info, paste it to the above -> data
      #     # nri-flex -encrypt_pass 'username=<YOUR USERNAME>,password=<YOUR PASSWORD>' -pass_phrase 'N3wR3lic!'
      #     # The decrypted username and password will be used to exchange for access_token
      #     type: equal

      variable_store:
        # Replace myorg with your organisation.
        rest_host: https://api.powerbi.com/v1.0/myorg
        oauth_url: https://login.microsoftonline.com/common/oauth2/v2.0/token
        # Replace these
        client_id: <INSERT_CLIENT_ID>
        client_secret: <INSERT_CLIENT_SECRET>
        username: ${secret.mylogin:username}
        password: ${secret.mylogin:password}
        rest_api: /datasets

      apis:
        # Get authorization token
        - name: authorization
          url: ${var:oauth_url}
          method: POST
          store_variables:
            storedtoken: access_token
          # This payload assumes oauth2 grant_type=password.
          # This should be configured based on your oauth flow
          payload: >-
            client_id=${var:client_id}&grant_type=password&client_secret=${var:client_secret}&username=${var:username}&password=${var:password}
          ignore_output: true
          # Get data using access_token
        - name: powerBIDataset
          url: ${var:rest_host}${var:rest_api}
          headers:
            Authorization: Bearer ${var:storedtoken}